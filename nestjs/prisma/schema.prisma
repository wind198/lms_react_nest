// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  TEACHER
  ADMIN
}

enum GENDER {
  OTHERS
  MALE
  FEMALE
}

enum EDUCATION_BACKGROUND {
  OTHERS
  HIGH_SCHOOL
  UNIVERSITY_STUDENT
  GRADUATED
  MASTER
  PHD
}

model User {
  id                   Int                  @id @default(autoincrement())
  is_active            Boolean              @default(false)
  full_name            String
  first_name           String
  last_name            String
  email                String
  password             String
  phone                String?
  address              String?              @db.Text()
  education_background EDUCATION_BACKGROUND
  user_type            UserType
  dob                  DateTime             @db.Date()
  gender               GENDER
  generation_id        Int?
  generation           Generation?          @relation(fields: [generation_id], references: [id], onDelete: Restrict)
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  deleted_at           DateTime?
  TempKey              TempKey[]

  @@index([education_background])
  @@index([user_type])
  @@index([generation_id])
  @@index([gender])
  @@index([created_at])
  @@index([dob])
  @@index([email])
  @@index([phone])
  @@fulltext([full_name])
}

model Generation {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  year        Int      @db.Year
  students    User[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Major {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  courses     Course[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  major_id    Int
  major       Major    @relation(fields: [major_id], references: [id])
  classes     Class[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Room {
  id              Int          @id @default(autoincrement())
  title           String
  description     String       @db.Text()
  address         String       @db.Text()
  room_setting_id Int?
  room_setting    RoomSetting? @relation(fields: [room_setting_id], references: [id])
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model RoomSetting {
  id                Int            @id @default(autoincrement())
  title             String
  description       String         @db.Text()
  dates_off         Json
  dates_off_once         Json
  capacity          Int
  room_optime_times RoomOpenTime[]
  rooms             Room[]
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
}

model RoomOpenTime {
  id              Int         @id @default(autoincrement())
  week_days       Json
  start_time      DateTime    @db.Time()
  end_time        DateTime    @db.Time()
  room_setting_id Int
  room_setting    RoomSetting @relation(fields: [room_setting_id], references: [id], onDelete: Cascade)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}

model Class {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  code        String?
  course_id   Int
  course      Course   @relation(fields: [course_id], references: [id], onDelete: Restrict)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

enum TempKeyPurpose {
  RESET_PASSWORD
  API_TOKEN
  ACTIVATE_USER
}

model TempKey {
  id          Int            @id @default(autoincrement())
  purpose     TempKeyPurpose
  value       String         @db.Text()
  description String?        @db.Text()
  created_at  DateTime       @default(now())
  expired_at  DateTime
  user        User?          @relation(fields: [user_id], references: [id])
  user_id     Int?
}
